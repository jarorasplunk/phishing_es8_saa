{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_9_to_port_10",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "id": "port_8_to_port_9",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_10_to_port_5",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_25_to_port_27",
                    "sourceNode": "25",
                    "sourcePort": "25_out",
                    "targetNode": "27",
                    "targetPort": "27_in"
                },
                {
                    "conditions": [
                        {
                            "conditionKey": "condition_key_0",
                            "index": 0
                        }
                    ],
                    "id": "port_19_to_port_8",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "id": "port_29_to_port_1",
                    "sourceNode": "29",
                    "sourcePort": "29_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_30_to_port_31",
                    "sourceNode": "30",
                    "sourcePort": "30_out",
                    "targetNode": "31",
                    "targetPort": "31_in"
                },
                {
                    "id": "port_31_to_port_29",
                    "sourceNode": "31",
                    "sourcePort": "31_out",
                    "targetNode": "29",
                    "targetPort": "29_in"
                },
                {
                    "conditions": [
                        {
                            "conditionKey": "condition_key_14",
                            "index": 1
                        }
                    ],
                    "id": "port_5_to_port_23",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "23",
                    "targetPort": "23_in"
                },
                {
                    "id": "port_23_to_port_25",
                    "sourceNode": "23",
                    "sourcePort": "23_out",
                    "targetNode": "25",
                    "targetPort": "25_in"
                },
                {
                    "id": "port_27_to_port_30",
                    "sourceNode": "27",
                    "sourcePort": "27_out",
                    "targetNode": "30",
                    "targetPort": "30_in"
                },
                {
                    "id": "port_0_to_port_32",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "32",
                    "targetPort": "32_in"
                },
                {
                    "id": "port_32_to_port_19",
                    "sourceNode": "32",
                    "sourcePort": "32_out",
                    "targetNode": "19",
                    "targetPort": "19_in"
                }
            ],
            "hash": "885f61b08d40395b5af1fa7fb5aa5a2fbc35be5c",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {
                        "input_spec": [
                            {
                                "name": "Name is required"
                            }
                        ]
                    },
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 680,
                    "y": 0
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 680,
                    "y": 1920
                },
                "10": {
                    "data": {
                        "action": "get job screenshots",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Splunk Attack Analyzer Connector for Splunk SOAR",
                        "connectorConfigs": [
                            "splunk_attack_analyzer"
                        ],
                        "connectorId": "de681fee-c552-45bf-9212-827b1c7529f8",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_job_screenshots_1",
                        "id": "10",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "job_id": "get_finding_or_investigation_1:action_result.data.*.consolidated_findings.SAA_JOB_ID"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "job_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "10",
                    "type": "action",
                    "warnings": {},
                    "x": 660,
                    "y": 800
                },
                "19": {
                    "data": {
                        "advanced": {
                            "customName": "check job id",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "get_finding_or_investigation_1:action_result.data.*.consolidated_findings.SAA_JOB_ID",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "conditionKey": "condition_key_0",
                                "customName": "job id exists",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "check_job_id",
                        "id": "19",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "19",
                    "type": "decision",
                    "warnings": {},
                    "x": 740,
                    "y": 324
                },
                "23": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "playbook_get_container_id_and_vault_list_1",
                        "id": "23",
                        "inputs": {
                            "finding_id": {
                                "datapaths": [
                                    "get_finding_or_investigation_1:action_result.data.*.investigation_id"
                                ],
                                "deduplicate": false
                            }
                        },
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "playbookName": "get container id and vault list",
                        "playbookRepo": 2,
                        "playbookRepoName": "local",
                        "playbookType": "data",
                        "synchronous": true,
                        "type": "playbook"
                    },
                    "errors": {},
                    "id": "23",
                    "type": "playbook",
                    "warnings": {},
                    "x": 660,
                    "y": 1120
                },
                "25": {
                    "data": {
                        "advanced": {
                            "customName": "image base64",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 3,
                        "functionName": "image_base64",
                        "id": "25",
                        "inputParameters": [
                            "playbook_get_container_id_and_vault_list_1:playbook_output:vault_list"
                        ],
                        "outputVariables": [
                            "image_base64",
                            "status"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "25",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    image_base64__image_base64 = []\n    image_base64__status = []\n    import base64\n    phantom.debug(type(playbook_get_container_id_and_vault_list_1_output_vault_list_values))\n    phantom.debug(playbook_get_container_id_and_vault_list_1_output_vault_list_values)\n    for i in range(len(playbook_get_container_id_and_vault_list_1_output_vault_list_values)):            \n        image_path = playbook_get_container_id_and_vault_list_1_output_vault_list_values[i]\n        phantom.debug(image_path)            \n        with open(image_path, \"rb\") as image_file:        \n            encoded_string = base64.b64encode(image_file.read()).decode('utf-8')                \n        image_base64__image_base64.append(encoded_string)\n        image_base64__status.append(\"success\")\n        phantom.debug(image_base64__image_base64)            \n        phantom.debug(image_base64__status)\n",
                    "warnings": {},
                    "x": 660,
                    "y": 1260
                },
                "27": {
                    "data": {
                        "action": "add investigation file",
                        "actionType": "post",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Enterprise Security",
                        "connectorConfigs": [
                            "builtin_mc_connector"
                        ],
                        "connectorId": "7e971d03-6ae7-4429-b4e1-cf461003e75b",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "add_investigation_file_2",
                        "id": "27",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "data": "image_base64:custom_function:image_base64",
                            "file_name": "Screenshot",
                            "id": "get_finding_or_investigation_1:action_result.data.*.investigation_id",
                            "source_type": "Note"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "id"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "data"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "file_name"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "source_type"
                            }
                        ],
                        "type": "enterpriseSecurity"
                    },
                    "errors": {},
                    "id": "27",
                    "type": "enterpriseSecurity",
                    "warnings": {},
                    "x": 660,
                    "y": 1380
                },
                "29": {
                    "data": {
                        "action": "add finding or investigation note",
                        "actionType": "post",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Enterprise Security",
                        "connectorConfigs": [
                            "builtin_mc_connector"
                        ],
                        "connectorId": "7e971d03-6ae7-4429-b4e1-cf461003e75b",
                        "connectorVersion": "v1",
                        "functionId": 3,
                        "functionName": "add_finding_or_investigation_note_3",
                        "id": "29",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "content": "format_file_report:formatted_data",
                            "files": [],
                            "id": "get_finding_or_investigation_1:action_result.data.*.investigation_id",
                            "title": "Splunk Attack Analyzer Report"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "id"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "title"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "content"
                            }
                        ],
                        "type": "enterpriseSecurity"
                    },
                    "errors": {},
                    "id": "29",
                    "type": "enterpriseSecurity",
                    "warnings": {},
                    "x": 660,
                    "y": 1760
                },
                "30": {
                    "data": {
                        "advanced": {
                            "customName": "normalized_file_summary_output",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "normalized_file_summary_output",
                        "id": "30",
                        "inputParameters": [
                            "filtered-data:job_type:condition_2:get_job_summary_1:action_result.data.*.Submission.Name",
                            "filtered-data:job_type:condition_2:get_job_summary_1:action_result.data.*.ID",
                            "filtered-data:job_type:condition_1:get_job_summary_2:action_result.parameter.job_id",
                            "filtered-data:job_type:condition_1:get_job_summary_2:action_result.data.*.Submission.Name",
                            "filtered-data:job_type:condition_2:get_job_summary_1:action_result.summary.Score",
                            "filtered-data:job_type:condition_2:get_job_summary_1:action_result.data.*.Resources",
                            "filtered-data:job_type:condition_2:get_job_summary_1:action_result.data.*.Verdict",
                            "filtered-data:job_type:condition_2:get_job_summary_1:action_result.data.*.Tasks"
                        ],
                        "outputVariables": [
                            "file_score_object",
                            "scores",
                            "categories",
                            "score_id",
                            "file",
                            "job_id",
                            "classifications",
                            "file_name"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "30",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    \n    phantom.debug(filtered_result_1_data___submission_name)\n    phantom.debug(filtered_result_0_data___id)\n    phantom.debug(filtered_result_1_parameter_job_id)\n    phantom.debug(filtered_result_0_summary_score)\n    phantom.debug(filtered_result_0_data___resources)\n    phantom.debug(filtered_result_0_data___verdict)\n    phantom.debug(filtered_result_0_data___tasks)\n    \n    score_table = {\n        \"0\":\"Unknown\",\n        \"1\":\"Very_Safe\",\n        \"2\":\"Safe\",\n        \"3\":\"Probably_Safe\",\n        \"4\":\"Leans_Safe\",\n        \"5\":\"May_not_be_Safe\",\n        \"6\":\"Exercise_Caution\",\n        \"7\":\"Suspicious_or_Risky\",\n        \"8\":\"Possibly_Malicious\",\n        \"9\":\"Probably_Malicious\",\n        \"10\":\"Malicious\"\n    }\n\n    classification_ids = {\n        \"Unknown\": 0,\n        \"Adware\": 1,\n        \"Backdoor\": 2,\n        \"Bot\": 3,\n        \"Bootkit\": 4,\n        \"DDOS\": 5,\n        \"Downloader\": 6,\n        \"Dropper\": 7,\n        \"Exploit-Kit\": 8,\n        \"Keylogger\": 9,\n        \"Ransomware\": 10,\n        \"Remote-Access-Trojan\": 11,\n        \"Resource-Exploitation\": 13,\n        \"Rogue-Security-Software\": 14,\n        \"Rootkit\": 15,\n        \"Screen-Capture\": 16,\n        \"Spyware\": 17,\n        \"Trojan\": 18,\n        \"Virus\": 19,\n        \"Webshell\": 20,\n        \"Wiper\": 21,\n        \"Worm\": 22,\n        \"Other\": 99\n    }\n\n    normalized_file_summary_output__file_score_object = []\n    normalized_file_summary_output__scores = []\n    normalized_file_summary_output__categories = []\n    normalized_file_summary_output__score_id = []\n    normalized_file_summary_output__file = []\n    normalized_file_summary_output__job_id = []\n    normalized_file_summary_output__classifications = []\n    normalized_file_summary_output__file_name = []\n    \n    \n    def find_sha1_details(target_id, task_list):\n        '''\n        Attempt to find the detail object with a sha1\n        '''\n        for task in task_list:\n            if (target_id == task.get('ResourceID')\n                and task.get('Results',{}).get('Details', {}).get('sha1')):\n                task_result_details = task['Results']['Details']\n                task_result_details.pop('RootTaskID', None)\n                return task_result_details\n        return None\n\n        \n    ## pair forensic job results with url detonated\n    job_file_dict = {}\n    for orig_file, orig_job, filtered_job in zip(filtered_result_1_data___submission_name, filtered_result_0_data___id, filtered_result_1_parameter_job_id):\n        if orig_job == filtered_job:\n            job_file_dict[filtered_job] = orig_file\n    \n    for job, file_name, score_num, resources, verdict, tasks in zip(\n        filtered_result_1_parameter_job_id, \n        filtered_result_0_data___submission_name, \n        filtered_result_0_summary_score, \n        filtered_result_0_data___resources, \n        filtered_result_0_data___verdict,\n        filtered_result_0_data___tasks\n    ):\n        \n        ## translate scores\n        score_id = int(score_num/10) if score_num > 0 else 0\n        score = score_table[str(score_id)]\n        file = job_file_dict[job]\n        attributes = {}\n        \n        ## build.a sub dictionary of high priority related observables\n        related_observables = []\n        for sub_observ in resources:\n            if sub_observ['Name'] != file_name:\n                        \n                details = find_sha1_details(sub_observ['ID'], tasks)\n                second_num = sub_observ['DisplayScore']\n                second_num_id = int(second_num/10) if second_num > 0 else 0\n                sub_observ_dict = {\n                    'value': sub_observ['Name'],\n                    'type': sub_observ['Type'].lower(),\n                    'reputation': {\n                        'score': score_table[str(second_num_id)],\n                        'orig_score': second_num,\n                        'score_id': second_num_id\n                    },\n                    'source': 'Splunk Attack Analyzer'\n                }\n                if details:\n                    details['name'] = sub_observ['Name']\n                    details.pop('exiftool', None)\n                    sub_observ_dict['attributes'] = details\n                # check if observ is already in related_observables\n                skip_observ = False\n                for idx, item in enumerate(related_observables):\n                    if (sub_observ.get('FileMetadata', {}).get('SHA256', 'null_one') \n                        == item.get('attributes', {}).get('sha256', 'null_two')\n                        and sub_observ['DisplayScore'] > item['reputation']['orig_score']):\n                        related_observables[idx] = sub_observ_dict\n                        skip_observ = True\n                    elif sub_observ['Name'] == item['value']:\n                        skip_observ = True\n                if not skip_observ:\n                    related_observables.append(sub_observ_dict)\n            elif sub_observ['Name'] == file_name:\n                details = find_sha1_details(sub_observ['ID'], tasks)\n                if details:\n                    details.pop('exiftool', None)\n                    details['name'] = file_name\n                    attributes = details\n                else:\n                    file_metadata = sub_observ.get('FileMetadata', {})\n                    attributes = {\n                        'name': file_name,\n                        'sha256': file_metadata.get('SHA256'),\n                        'md5': file_metadata.get('MD5'),\n                        'size': file_metadata.get('Size')\n                    }\n                    if file_metadata.get('MimeType'):\n                        attributes['mime_type'] = file_metadata['MimeType']\n        \n        normalized_file_summary_output__file_score_object.append({\n            'value': file, \n            'orig_score': score_num, \n            'score': score, \n            'score_id': score_id, \n            'classifications': [verdict if verdict else \"Unknown\"],\n            'classification_ids': [classification_ids.get(verdict, 99) if verdict else 0],\n            'related_observables': related_observables,\n            'attributes': attributes\n                \n        })\n        normalized_file_summary_output__scores.append(score)\n        normalized_file_summary_output__score_id.append(score_id)\n        normalized_file_summary_output__file.append(file)\n        normalized_file_summary_output__file_name.append(file_name)\n        normalized_file_summary_output__job_id.append(job)\n        normalized_file_summary_output__classifications.append([verdict if verdict else \"Unknown\"])\n\n    phantom.debug(normalized_file_summary_output__scores)\n    phantom.debug(normalized_file_summary_output__score_id)\n    phantom.debug(normalized_file_summary_output__file)\n    phantom.debug(normalized_file_summary_output__file_name)\n    phantom.debug(normalized_file_summary_output__job_id)\n    phantom.debug(normalized_file_summary_output__classifications)\n\n",
                    "warnings": {
                        "config": [
                            "Reconfigure invalid datapath."
                        ]
                    },
                    "x": 660,
                    "y": 1520
                },
                "31": {
                    "data": {
                        "advanced": {
                            "customName": "format file report",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 3,
                        "functionName": "format_file_report",
                        "id": "31",
                        "parameters": [
                            "normalized_file_summary_output:custom_function:file_name",
                            "normalized_file_summary_output:custom_function:scores",
                            "normalized_file_summary_output:custom_function:score_id",
                            "normalized_file_summary_output:custom_function:classifications",
                            "normalized_file_summary_output:custom_function:job_id",
                            "filtered-data:job_type:condition_1:get_job_summary_1:action_result.summary.AppURL"
                        ],
                        "template": "SOAR analyzed File(s) using Splunk Attack Analyzer.  The table below shows a summary of the information gathered.\n\n| File Name | Normalized Score | Score Id  | Classifications | Report Link | Source |\n| --- | --- | --- | --- | --- | --- |\n%%\n| `{0}` | {1} | {2} | {3} | {5} | Splunk Attack Analyzer (SAA) |\n%%\n\nScreenshots associated with the detonated Files are attached in the \"Files\" section below.\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "31",
                    "type": "format",
                    "warnings": {},
                    "x": 660,
                    "y": 1640
                },
                "32": {
                    "data": {
                        "action": "get finding or investigation",
                        "actionType": "get",
                        "advanced": {
                            "customName": "get_finding_or_investigation_1",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "Enterprise Security",
                        "connectorConfigs": [
                            "builtin_mc_connector"
                        ],
                        "connectorId": "7e971d03-6ae7-4429-b4e1-cf461003e75b",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_finding_or_investigation_1",
                        "id": "32",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "id": "finding:investigation_id"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "id"
                            }
                        ],
                        "type": "enterpriseSecurity"
                    },
                    "errors": {},
                    "id": "32",
                    "type": "enterpriseSecurity",
                    "warnings": {},
                    "x": 660,
                    "y": 144.5
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "job type",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "get_job_summary_1:action_result.data.*.Submission.MD5",
                                        "value": ""
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "get_job_summary_1:action_result.data.*.Submission.SHA256",
                                        "value": ""
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "http",
                                        "value": "get_job_summary_1:action_result.data.*.Submission.Name"
                                    }
                                ],
                                "conditionIndex": 0,
                                "conditionKey": "condition_key_0",
                                "customName": "URL type",
                                "logic": "and"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "!=",
                                        "param": "get_job_summary_1:action_result.data.*.Submission.MD5",
                                        "value": ""
                                    },
                                    {
                                        "conditionIndex": 1,
                                        "op": "!=",
                                        "param": "get_job_summary_1:action_result.data.*.Submission.SHA256",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "conditionKey": "condition_key_14",
                                "customName": "File type",
                                "logic": "and"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "job_type",
                        "id": "5",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "filter",
                    "warnings": {},
                    "x": 720,
                    "y": 940
                },
                "8": {
                    "data": {
                        "action": "get job summary",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Splunk Attack Analyzer Connector for Splunk SOAR",
                        "connectorConfigs": [
                            "splunk_attack_analyzer"
                        ],
                        "connectorId": "de681fee-c552-45bf-9212-827b1c7529f8",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_job_summary_1",
                        "id": "8",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "job_id": "get_finding_or_investigation_1:action_result.data.*.consolidated_findings.SAA_JOB_ID"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "job_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "action",
                    "warnings": {},
                    "x": 660,
                    "y": 504
                },
                "9": {
                    "data": {
                        "action": "get job forensics",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Splunk Attack Analyzer Connector for Splunk SOAR",
                        "connectorConfigs": [
                            "splunk_attack_analyzer"
                        ],
                        "connectorId": "de681fee-c552-45bf-9212-827b1c7529f8",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_job_forensics_1",
                        "id": "9",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "job_id": "get_finding_or_investigation_1:action_result.data.*.consolidated_findings.SAA_JOB_ID"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "job_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "9",
                    "type": "action",
                    "warnings": {},
                    "x": 660,
                    "y": 652
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_trigger": "artifact_created",
        "playbook_type": "es",
        "python_version": "3.9",
        "schema": "5.0.17",
        "version": "6.4.1.342"
    },
    "create_time": "2025-06-17T05:12:01.538602+00:00",
    "draft_mode": false,
    "labels": [
        "es_soar_integration"
    ],
    "tags": []
}